[{"/Users/benjaminjordan/Projects/thegoldenmule/nk/nk-js/example/src/index.js":"1","/Users/benjaminjordan/Projects/thegoldenmule/nk/nk-js/example/src/App.js":"2","/Users/benjaminjordan/Projects/thegoldenmule/nk/nk-js/example/src/nk-js.js":"3"},{"size":267,"mtime":1611357833773,"results":"4","hashOfConfig":"5"},{"size":6311,"mtime":1611357833773,"results":"6","hashOfConfig":"5"},{"size":11485,"mtime":1611357833773,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19v1xkq",{"filePath":"10","messages":"11","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/Users/benjaminjordan/Projects/thegoldenmule/nk/nk-js/example/src/index.js",[],"/Users/benjaminjordan/Projects/thegoldenmule/nk/nk-js/example/src/App.js",["17","18","19","20","21","22"],"import './App.css';\nimport { Button, ButtonGroup, Col, Container, Form, InputGroup, ListGroup, Navbar, Row } from 'react-bootstrap';\nimport { useRef, useState } from 'react';\nimport { createContext, isLoggedIn, register, createData, getKeys, serialize, deserialize, updateData } from './nk-js';\nimport 'codemirror/lib/codemirror.css';\nimport '@toast-ui/editor/dist/toastui-editor.css';\n\nimport { Editor } from '@toast-ui/react-editor';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDownload, faPlus, faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FileBadgeIcon } from '@primer/octicons-react';\n\n// taken from https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid\nconst newKey = () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n  const r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n  return v.toString(16);\n});\n\nconst newNote = () => ({\n  title: '',\n  body: '',\n});\nconst valueToNote = value => JSON.stringify(value);\nconst noteToValue = note => JSON.stringify(note);\n\nconst ProfileView = ({ context, onCreateUser, onLogin }) => {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          {\n            isLoggedIn(context)\n              ? <p>{`Logged in. UserId: '${context.userId}'.`}</p>\n              : <Button onClick={() => onCreateUser()}>Create Account</Button>\n          }\n        </Col>\n        <Col>\n          {\n            !isLoggedIn(context) && (\n              <Button\n                disabled\n                onClick={() => onLogin('111111')}\n              >Login\n              </Button>\n            )\n          }\n        </Col>\n      </Row>\n    </Container>\n  )\n};\n\nconst TextEditor = ({ activeNote, note = {}, onSave }) => {\n  const { title, body } = note;\n\n  const ref = useRef(null);\n  const [draftTitle, setDraftTitle] = useState(title);\n  const [draftBody, setDraftBody] = useState(body);\n\n  if (!activeNote) {\n    return null;\n  }\n\n  return (\n    <Container className={\"p-2\"}>\n      <Row className={\"p-2\"}>\n        <Col>\n          <Button\n            onClick={async () => onSave({ title: draftTitle, body: draftBody })}\n          >\n            <FontAwesomeIcon icon={faSave} />\n          </Button>\n        </Col>\n      </Row>\n      <Row className={\"p-2\"}>\n        <Col>\n          <Form>\n            <Form.Control\n              size=\"lg\"\n              type=\"text\"\n              placeholder=\"Title\"\n              value={title}\n              onChange={evt => setDraftTitle(evt.target.value)}\n            />\n          </Form>\n        </Col>\n      </Row>\n      <Row className={\"p-2\"}>\n        <Col>\n          <Editor\n            ref={ref}\n            initialValue={body}\n            placeholder=\"Start writing\"\n            previewStyle=\"vertical\"\n            height=\"600px\"\n            initialEditType=\"wysiwyg\"\n            useCommandShortcut={true}\n            onChange={() => setDraftBody(ref.current.getInstance().getMarkdown())}\n          />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nconst FileBrowser = ({\n  notes, activeNote,\n  onCreateNote, onRefreshNotes, onNoteSelected\n}) => {\n  return (\n    <Container className={\"p-2\"}>\n      <Row className={\"p-2\"}>\n        <Button\n          onClick={onCreateNote}\n        ><FontAwesomeIcon icon={faPlus} /></Button>\n        <Button\n          variant='secondary'\n          onClick={onRefreshNotes}\n        ><FontAwesomeIcon icon={faDownload} /></Button>\n      </Row>\n      <Row className={\"p-2\"}>\n        <ListGroup>\n          {\n            notes.map((note, i) => (\n              <ListGroup.Item\n                key={i}\n                action\n                active={note === activeNote}\n                onClick={() => onNoteSelected(note)}\n              >\n                {note}\n              </ListGroup.Item>\n            ))\n          }\n        </ListGroup>\n      </Row>\n    </Container>\n  );\n};\n\nconst loadContext = () => createContext();\n\nfunction App() {\n  const [context, setContext] = useState(loadContext());\n  const [activeKey, setActiveKey] = useState('');\n\n  const { keyNames, values } = context;\n  const note = valueToNote(values[activeKey]);\n\n  return (\n    <div style={{ paddingTop: '20px' }}>\n      <Container>\n        <Row className=\"p-2\">\n          <Navbar>\n            <Navbar.Brand>Nk-js Example</Navbar.Brand>\n          </Navbar>\n        </Row>\n        <Row className=\"p-2\">\n          <ProfileView\n            context={context}\n            onLogin={async password => {\n              const contextData = localStorage.getItem('_context');\n              const newContext = deserialize(contextData, password);\n              setContext(newContext);\n            }}\n            onCreateUser={async () => {\n              const newContext = await register(context);\n              setContext(newContext);\n\n              // TODO: ask for passphrase\n              const serialized = await serialize(newContext, '111111');\n\n              // save!\n              localStorage.setItem('_context', serialized);\n            }}\n          />\n        </Row>\n        {\n          isLoggedIn(context) && (\n            <Row className=\"p-2\">\n              <Col xs={3} className=\"p-2\">\n                <FileBrowser\n                  notes={keyNames}\n                  activeNote={activeKey}\n                  onCreateNote={async () => {\n                    const key = newKey();\n                    const newContext = await createData(context, key, noteToValue(newNote()));\n\n                    setContext(newContext);\n                    setActiveKey(key);\n                  }}\n                  onRefreshNotes={async() => {\n                    const newContext = await getKeys(context);\n                    setContext(newContext);\n                  }}\n                  onNoteSelected={note => setActiveKey(note)}\n                />\n              </Col>\n              <Col className=\"p-2\">\n                <TextEditor\n                  activeNote={activeKey}\n                  note={note}\n                  onSave={async updatedNote => {\n                    const newContext = await updateData(context, activeKey, noteToValue(updatedNote))\n                    setContext(newContext);\n                  }}\n                />\n              </Col>\n            </Row>\n          )\n        }\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n",["23","24"],"/Users/benjaminjordan/Projects/thegoldenmule/nk/nk-js/example/src/nk-js.js",["25","26","27","28","29","30","31","32","33"],"var Base64Binary = {\n  _keyStr : \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n\n  /* will return a  Uint8Array type */\n  decodeArrayBuffer: function(input) {\n    var bytes = (input.length/4) * 3;\n    var ab = new ArrayBuffer(bytes);\n    this.decode(input, ab);\n\n    return ab;\n  },\n\n  removePaddingChars: function(input){\n    var lkey = this._keyStr.indexOf(input.charAt(input.length - 1));\n    if(lkey == 64){\n      return input.substring(0,input.length - 1);\n    }\n    return input;\n  },\n\n  decode: function (input, arrayBuffer) {\n    //get last chars to see if are valid\n    input = this.removePaddingChars(input);\n    input = this.removePaddingChars(input);\n\n    var bytes = parseInt((input.length / 4) * 3, 10);\n\n    var uarray;\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n    var j = 0;\n\n    if (arrayBuffer)\n      uarray = new Uint8Array(arrayBuffer);\n    else\n      uarray = new Uint8Array(bytes);\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    for (i=0; i<bytes; i+=3) {\n      //get the 3 octects in 4 ascii chars\n      enc1 = this._keyStr.indexOf(input.charAt(j++));\n      enc2 = this._keyStr.indexOf(input.charAt(j++));\n      enc3 = this._keyStr.indexOf(input.charAt(j++));\n      enc4 = this._keyStr.indexOf(input.charAt(j++));\n\n      chr1 = (enc1 << 2) | (enc2 >> 4);\n      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      chr3 = ((enc3 & 3) << 6) | enc4;\n\n      uarray[i] = chr1;\n      if (enc3 != 64) uarray[i+1] = chr2;\n      if (enc4 != 64) uarray[i+2] = chr3;\n    }\n\n    return uarray;\n  }\n}\n\nconst uintBufferToBase64String = buffer => btoa(String.fromCharCode.apply(null, buffer));\nconst arrayBufferToBase64String = buffer => uintBufferToBase64String(new Uint8Array(buffer));\nconst base64StringToUintBuffer = str => {\n  const binary = atob(str);\n  const bytes = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n\n  return bytes;\n}\n\nconst getKeyMaterial = password => crypto.subtle.importKey(\n  \"raw\",\n  new TextEncoder().encode(password),\n  { name: 'PBKDF2' },\n  false,\n  [\"deriveBits\", \"deriveKey\"]\n);\n\nconst deriveKey = (keyMaterial, salt, alg) => crypto.subtle.deriveKey(\n  {\n    \"name\": \"PBKDF2\",\n    salt,\n    \"iterations\": 100000,\n    \"hash\": \"SHA-256\"\n  },\n  keyMaterial,\n  { \"name\": alg, \"length\": 256},\n  true,\n  [ \"wrapKey\", \"unwrapKey\" ]\n);\n\nconst deserializePrivateKey = async ({ bytes, salt, iv }, password) => {\n  const keyBuffer = Base64Binary.decodeArrayBuffer(bytes);\n\n  return crypto.subtle.importKey(\n    \"pkcs8\",\n    keyBuffer,\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: 4096,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: 'SHA-512',\n    },\n    true,\n    ['sign', 'verify']);\n};\n\nconst serializePrivateKey = async (key, password) => {\n  // TODO: encrypt\n  const exportKey = await crypto.subtle.exportKey(\"pkcs8\", key);\n\n  const payload = {\n    bytes: arrayBufferToBase64String(exportKey),\n  };\n\n  return payload;\n}\n\nconst serializePublicKey = async (key, password) => {\n  // TODO: encrypt\n  const exportKey = await crypto.subtle.exportKey(\"spki\", key);\n\n  const payload = {\n    bytes: arrayBufferToBase64String(exportKey),\n  };\n\n  return payload;\n};\n\nconst serializeEncryptionKey = async (key, password) => {\n  const keyMaterial = await getKeyMaterial(password);\n  const salt = crypto.getRandomValues(new Uint8Array(16));\n  const wrappingKey = await deriveKey(keyMaterial, salt, 'AES-KW');\n\n  const wrapped = await crypto.subtle.wrapKey(\n    'raw',\n    key,\n    wrappingKey,\n    'AES-KW',\n  );\n\n  return {\n    salt: uintBufferToBase64String(salt),\n    bytes: arrayBufferToBase64String(wrapped),\n  };\n};\n\nconst serialize = async (context, password) => {\n  const copy = JSON.parse(JSON.stringify(context));\n\n  copy.keys.signing = {};\n  try {\n    copy.keys.signing.privateKey = await serializePrivateKey(context.keys.signing.privateKey, password);\n  } catch (error) {\n    console.log('Could not serialize private key.', error);\n  }\n\n  try {\n    copy.keys.signing.publicKey = await serializePublicKey(context.keys.signing.publicKey, password);\n  } catch (error) {\n    console.log('Could not serialize public key.', error);\n  }\n\n  try {\n    copy.keys.encryption = await serializeEncryptionKey(context.keys.encryption, password);\n  } catch (error) {\n    console.log('Could not serialize encryption key.', error)\n  }\n\n  return JSON.stringify(copy);\n};\n\nconst deserialize = async (data, password) => {\n  const context = JSON.parse(data);\n\n  const { signing: { privateKey, publicKey }, encryption } = context.keys;\n  context.keys = {\n    signing: {},\n  };\n\n  try {\n    context.keys.signing.privateKey = await deserializePrivateKey(privateKey, password);\n  } catch (error) {\n    console.error(`Could not create private key: ${error}.`);\n  }\n\n  return context;\n};\n\nconst generateSigningPair = async () => {\n  const pair = await crypto.subtle.generateKey(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      modulusLength: 4096,\n      publicExponent: new Uint8Array([1, 0, 1]),\n      hash: 'SHA-512',\n    },\n    true,\n    ['sign', 'verify'],\n  );\n\n  return pair;\n};\n\nconst generateSymmetricKey = async () => await crypto.subtle.generateKey(\n  {\n    name: 'AES-GCM',\n    length: 256,\n  },\n  true,\n  ['encrypt', 'decrypt']);\n\nconst exportPublicPEM = async (publicKey) => {\n  let exportedPublic;\n  try {\n    exportedPublic = await crypto.subtle.exportKey('spki', publicKey);\n  } catch (error) {\n    throw new Error(`Could not export public key: ${error}.`);\n  }\n\n  const key = arrayBufferToBase64String(exportedPublic)\n    .match(/.{1,64}/g)\n    .join('\\n');\n\n  return `-----BEGIN PUBLIC KEY-----\\n${key}\\n-----END PUBLIC KEY-----`;\n};\n\nconst aesParameters = () => ({\n  name: 'AES-GCM',\n  iv: window.crypto.getRandomValues(new Uint8Array(12)),\n  tagLength: 128,\n});\n\nconst createContext = () => ({\n  url: 'http://localhost:5000',\n  userId: undefined,\n  keys: {\n    signing: undefined,\n    encryption: undefined,\n  },\n  keyNames: [],\n  values: {}\n});\n\nconst contextWithKeys = (context, signing, encryption) => ({\n  ...context,\n  keys: {\n    signing,\n    encryption,\n  },\n});\n\nconst contextWithKeyNames = (context, keyNames) => ({\n  ...context,\n  keyNames: [...new Set(keyNames)],\n});\n\nconst contextWithUserId = (context, userId) => ({\n  ...context,\n  userId,\n});\n\nconst contextWithValue = (context, keyName, value) => contextWithKeyNames({\n  ...context,\n  values: {\n    ...context.values,\n    [keyName]: value\n  }\n}, [...context.keyNames, keyName]);\n\nconst isLoggedIn = context => context.userId !== undefined;\n\nconst register = async (context) => {\n  // generate signing pair\n  let signingKeys;\n  try {\n    signingKeys = await generateSigningPair();\n  } catch (error) {\n    throw new Error(`Could not generate signing key pair: ${error}.`);\n  }\n\n  // generate symmetric key\n  let encryptionKey;\n  try {\n    encryptionKey = await generateSymmetricKey();\n  } catch (error) {\n    throw new Error(`Could not generate encryption key: ${error}.`);\n  }\n\n  // export\n  const key = await exportPublicPEM(signingKeys.publicKey);\n\n  // create user\n  const headers = new Headers();\n  headers.append(\"Content-Type\", \"text/plain\");\n\n  let json;\n  try {\n    const res = await fetch(\n      `${context.url}/user`,\n      {\n        method: 'post',\n        body: key,\n        headers,\n      });\n    json = await res.json();\n  } catch (e) {\n    throw e;\n  }\n\n  return contextWithKeys(\n    contextWithUserId(context, json.userId),\n    signingKeys,\n    encryptionKey,\n  );\n};\n\nconst proveFetch = async (context, url, options) => {\n  let json;\n  try {\n    const res = await fetch(\n      `${context.url}/proof/${context.userId}`,\n      {\n        method: 'post',\n      }\n    );\n\n    json = await res.json();\n  } catch (error) {\n    throw new Error(`Could not fetch proof: ${error}.`);\n  }\n\n  const { success, error, value } = json;\n  if (!success) {\n    throw new Error(`Could not fetch proof: ${error}.`);\n  }\n\n  // sign\n  const signature = await crypto.subtle.sign(\n    {\n      name: 'RSASSA-PKCS1-v1_5',\n      saltLength: 32\n    },\n    context.keys.signing.privateKey,\n    new TextEncoder().encode(value));\n  const signatureString = arrayBufferToBase64String(signature);\n\n  // create headers object\n  if (!options) {\n    options = {};\n  }\n  if (!options.headers) {\n    options.headers = {};\n  }\n\n  // append proof + signature\n  options.headers['X-Nk-Proof'] = value;\n  options.headers['X-Nk-Proof-Sig'] = signatureString;\n\n  return await fetch(url, options);\n};\n\nconst getKeys = async (context) => {\n  let json;\n  try {\n    const res = await proveFetch(\n      context,\n      `${context.url}/data/${context.userId}`\n    );\n\n    json = await res.json();\n  } catch (error) {\n    throw new Error(`Could not get keys: ${error}.`);\n  }\n\n  const { success, error, keys } = json;\n  if (!success) {\n    throw new Error(`Could not get keys: ${error}.`);\n  }\n\n  return contextWithKeyNames(context, keys);\n};\n\nconst encrypt = async (context, value) => {\n  // create Uint8Array from value\n  const enc = new TextEncoder();\n  const encodedValue = enc.encode(value);\n\n  // encrypt with hard symmetric encryption\n  let cipher;\n  try {\n    cipher = await crypto.subtle.encrypt(\n      aesParameters(),\n      context.keys.encryption,\n      encodedValue\n    );\n  } catch (error) {\n    throw new Error(`Could not encrypt value: ${error}.`);\n  }\n\n  // sign ciphertext with signing key\n  let signature;\n  try {\n    signature = await window.crypto.subtle.sign(\n      {\n        name: 'RSASSA-PKCS1-v1_5',\n      },\n      context.keys.signing.privateKey,\n      new Uint8Array(cipher),\n    );\n  } catch (error) {\n    throw new Error(`Could not sign value: ${error}.`);\n  }\n\n  return {\n    value: arrayBufferToBase64String(cipher),\n    signature: arrayBufferToBase64String(signature),\n  }\n}\n\nconst createData = async (context, keyName, value) => {\n  const { value: cipherValue, signature } = await encrypt(context, value);\n\n  // send\n  let json;\n  try {\n    const res = await fetch(`${context.url}/data/${context.userId}`,\n      {\n        method: 'post',\n        body: JSON.stringify({\n          Key: keyName,\n          Payload: cipherValue,\n          Sig: signature,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n      });\n\n    json = await res.json();\n  } catch (error) {\n    throw new Error(`Could not create data: ${error}.`);\n  }\n\n  if (!json.success) {\n    throw new Error('Could not create data: server returned false.');\n  }\n\n  return contextWithValue(context, keyName, value);\n};\n\nconst updateData = async (context, keyName, value) => {\n  const { value: cipherValue, signature } = await encrypt(context, value);\n\n  // send\n  let json;\n  try {\n    const res = await fetch(`${context.url}/data/${context.userId}/${keyName}`,\n      {\n        method: 'put',\n        body: JSON.stringify({\n          Key: keyName,\n          Payload: cipherValue,\n          Sig: signature,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n        },\n      });\n\n    json = await res.json();\n  } catch (error) {\n    throw new Error(`Could not update data: ${error}.`);\n  }\n\n  if (!json.success) {\n    throw new Error('Could not update data: server returned false.');\n  }\n\n  return contextWithValue(context, keyName, value);\n};\n\nexport { isLoggedIn, createContext, register, createData, updateData, getKeys, serialize, deserialize };\n",{"ruleId":"34","severity":1,"message":"35","line":2,"column":18,"nodeType":"36","messageId":"37","endLine":2,"endColumn":29},{"ruleId":"34","severity":1,"message":"38","line":2,"column":53,"nodeType":"36","messageId":"37","endLine":2,"endColumn":63},{"ruleId":"34","severity":1,"message":"39","line":11,"column":10,"nodeType":"36","messageId":"37","endLine":11,"endColumn":23},{"ruleId":"40","severity":1,"message":"41","line":15,"column":43,"nodeType":"42","messageId":"43","endLine":15,"endColumn":45},{"ruleId":"44","severity":1,"message":"45","line":15,"column":59,"nodeType":"42","messageId":"46","endLine":15,"endColumn":60},{"ruleId":"44","severity":1,"message":"45","line":15,"column":65,"nodeType":"42","messageId":"46","endLine":15,"endColumn":66},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"40","severity":1,"message":"41","line":15,"column":13,"nodeType":"42","messageId":"43","endLine":15,"endColumn":15},{"ruleId":"51","severity":1,"message":"52","line":39,"column":39,"nodeType":"53","messageId":"54","endLine":39,"endColumn":40,"suggestions":"55"},{"ruleId":"51","severity":1,"message":"56","line":39,"column":41,"nodeType":"53","messageId":"54","endLine":39,"endColumn":42,"suggestions":"57"},{"ruleId":"51","severity":1,"message":"58","line":39,"column":43,"nodeType":"53","messageId":"54","endLine":39,"endColumn":44,"suggestions":"59"},{"ruleId":"40","severity":1,"message":"60","line":53,"column":16,"nodeType":"42","messageId":"43","endLine":53,"endColumn":18},{"ruleId":"40","severity":1,"message":"60","line":54,"column":16,"nodeType":"42","messageId":"43","endLine":54,"endColumn":18},{"ruleId":"34","severity":1,"message":"61","line":63,"column":7,"nodeType":"36","messageId":"37","endLine":63,"endColumn":31},{"ruleId":"34","severity":1,"message":"62","line":178,"column":34,"nodeType":"36","messageId":"37","endLine":178,"endColumn":43},{"ruleId":"34","severity":1,"message":"63","line":178,"column":47,"nodeType":"36","messageId":"37","endLine":178,"endColumn":57},"no-unused-vars","'ButtonGroup' is defined but never used.","Identifier","unusedVar","'InputGroup' is defined but never used.","'FileBadgeIcon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-mixed-operators","Unexpected mix of '&' and '|'.","unexpectedMixedOperator","no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-useless-escape","Unnecessary escape character: \\+.","Literal","unnecessaryEscape",["66","67"],"Unnecessary escape character: \\/.",["68","69"],"Unnecessary escape character: \\=.",["70","71"],"Expected '!==' and instead saw '!='.","'base64StringToUintBuffer' is assigned a value but never used.","'publicKey' is assigned a value but never used.","'encryption' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"72","fix":"73","desc":"74"},{"messageId":"75","fix":"76","desc":"77"},{"messageId":"72","fix":"78","desc":"74"},{"messageId":"75","fix":"79","desc":"77"},{"messageId":"72","fix":"80","desc":"74"},{"messageId":"75","fix":"81","desc":"77"},"removeEscape",{"range":"82","text":"83"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"84","text":"85"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"86","text":"83"},{"range":"87","text":"85"},{"range":"88","text":"83"},{"range":"89","text":"85"},[997,998],"",[997,997],"\\",[999,1000],[999,999],[1001,1002],[1001,1001]]